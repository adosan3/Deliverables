Pythonにて交通シミュレータを作成しました。

simulation.gif：
シミュレーションの様子を表したgif画像です。小さい点は車を表し、そのうち赤の点は赤信号で停車した車を表します。大きい点は信号機を表し、その色は垂直方向の信号機の現示を表します。

trafficLight.py：
以下の(1)道路・自動車シミュレータと(2)信号機シミュレータから成ります。新規テーマであったため、すべて1人で0から作成しました。

(1)道路・自動車シミュレータ
　単純化のため、道路をグリッド状に区切りました。このシミュレータは16機の信号、信号機間を碁盤の目状に繋ぐ長さ11マス・片側1マス(両側2マス)の道路、2マス×2マスの交差点から成る道路と自動車から構成されます。自動車は1ステップに1マス進み、また任意のステップおきに任意の台数生成されます。車は道路外に出ると消失します。各車は交差点に差し掛かるとそれぞれ1/3の確率で直進、左折、右折のいずれかの動作を行います。右直事故防止のため、車の優先移動順は直進→左折→右折としています。

(2)信号機シミュレータ
　信号機には人工知能を搭載しており、そのアルゴリズムは強化学習の一手法であるＱ学習です。このＱ学習を用いて各方向の交通の時間を決定します。縦交通の青点灯時間のステップ数と横方向の青点灯時間のステップ数を、[縦,横] = [1, 9], [2, 8], [3, 7], [4, 5], [5, 4], [7, 3], [8, 2], [9, 1]のいずれかから選択します。青信号と赤信号の切り替え時には黄色信号が2ステップずつ挟まります。上記ステップが終了したら、各信号機は学習を行い、次回行動を決定し実行します。本実験では各交差点の車の通過数から各交差点で停車した車の総数を引いた数を報酬として与えます。なお、黄色で停止した車や、右折待ちしている車は停止車としてカウントしないこととします。
　協調方法として、各信号機は交差点を通り抜けた後すぐの道路を監視し、過去10ステップのうち3ステップ以上車が通った場合、その車の行き先となる信号機にシグナルを送ります。学習時・次回行動決定時にシグナルを受け取っている信号機は、そのシグナルを学習時に考慮することとします。

最終的に、allpenaltyとして、推論中に(赤信号で止まった車の停車ステップ数)の和を表示します。少ないほど、適切に制御できていると言えます。

fielddata.py, pos.bmp
trafficLightを実行するために必要なファイルです。